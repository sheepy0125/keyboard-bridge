/*!
 * Keyboard Bridge for Raspberry Pi - Key types
 * Created by sheepy0125 on 2023-07-22 under the MIT license
**/

/***** Setup *****/
use evdev::InputEvent;
use {KeyCode::*, ModifierKey::*, RegularKey::*};

/***** USB Key codes *****/
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum KeyCode {
    Regular(RegularKey),
    Modifier(ModifierKey),
    Unknown,
}
#[repr(u8)]
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum RegularKey {
    Empty = 0x00,
    A = 0x04,
    B = 0x05,
    C = 0x06,
    D = 0x07,
    E = 0x08,
    F = 0x09,
    G = 0x0A,
    H = 0x0B,
    I = 0x0C,
    J = 0x0D,
    K = 0x0E,
    L = 0x0F,
    M = 0x10,
    N = 0x11,
    O = 0x12,
    P = 0x13,
    Q = 0x14,
    R = 0x15,
    S = 0x16,
    T = 0x17,
    U = 0x18,
    V = 0x19,
    W = 0x1A,
    X = 0x1B,
    Y = 0x1C,
    Z = 0x1D,
    Num1 = 0x1E,
    Num2 = 0x1F,
    Num3 = 0x20,
    Num4 = 0x21,
    Num5 = 0x22,
    Num6 = 0x23,
    Num7 = 0x24,
    Num8 = 0x25,
    Num9 = 0x26,
    Num0 = 0x27,
    Enter = 0x28,
    Escape = 0x29,
    Backspace = 0x2A,
    Tab = 0x2B,
    Space = 0x2C,
    Minus = 0x2D,
    Equals = 0x2E,
    LeftSquareBracket = 0x2F,
    RightSquareBracket = 0x30,
    BackSlash = 0x31,
    Semicolon = 0x33,
    SingleQuote = 0x34,
    Grave = 0x35,
    Comma = 0x36,
    Period = 0x37,
    ForwardSlash = 0x38,
    CapsLock = 0x39,
    F1 = 0x3A,
    F2 = 0x3B,
    F3 = 0x3C,
    F4 = 0x3D,
    F5 = 0x3E,
    F6 = 0x3F,
    F7 = 0x40,
    F8 = 0x41,
    F9 = 0x42,
    F10 = 0x43,
    F11 = 0x44,
    F12 = 0x45,
    PrintScreen = 0x46,
    ScrollLock = 0x47,
    Insert = 0x49,
    Home = 0x4A,
    PageUp = 0x4B,
    Delete = 0x4C,
    End = 0x4D,
    PageDown = 0x4E,
    Right = 0x4F,
    Left = 0x50,
    Down = 0x51,
    Up = 0x52,
    NumLock = 0x53,
    KeyPadSlash = 0x54,
    KeyPadAsterisk = 0x55,
    KeyPadMinus = 0x56,
    KeyPadPlus = 0x57,
    KeyPadEnter = 0x58,
    KeyPadNum1 = 0x59,
    KeyPadNum2 = 0x5a,
    KeyPadNum3 = 0x5b,
    KeyPadNum4 = 0x5c,
    KeyPadNum5 = 0x5d,
    KeyPadNum6 = 0x5e,
    KeyPadNum7 = 0x5f,
    KeyPadNum8 = 0x60,
    KeyPadNum9 = 0x61,
    KeyPadNum0 = 0x62,
    KeyPadPeriod = 0x63,
    Power = 0x66,
    KeyPadEqual = 0x67,
    VolumeMute = 0x7F,
    VolumeUp = 0x80,
    VolumeDown = 0x81,
    KeyPadComma = 0x85,
    KeyPadLeftParen = 0xB6,
    KeyPadRightParen = 0xB7,
}
/// Masks for the modifier keys (left-most bit)
#[repr(u8)]
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
#[rustfmt::skip]
pub enum ModifierKey {
    LeftCtrl =   0b00000001,
    LeftShift =  0b00000010,
    LeftAlt =    0b00000100,
    LeftSuper =  0b00001000,
    RightCtrl =  0b00010000,
    RightShift = 0b00100000,
    RightAlt =   0b01000000,
    RightSuper = 0b10000000,
    /* Special modifier keys for chords */
    EitherCtrl =  0xFC,
    EitherShift = 0xFD,
    EitherAlt =   0xFE,
    EitherSuper = 0xFF
}

/***** Linux /dev/input keycodes to USB keycode lookup table *****/
// Source: https://gist.github.com/MightyPork/6da26e382a7ad91b5496ee55fdc73db2
impl From<InputEvent> for KeyCode {
    fn from(value: InputEvent) -> Self {
        match value.code() {
            /* KEY_RESERVED */ 0 => Regular(Empty),
            /* KEY_ESC */ 1 => Regular(Escape),
            /* KEY_1 */ 2 => Regular(Num1),
            /* KEY_2 */ 3 => Regular(Num2),
            /* KEY_3 */ 4 => Regular(Num3),
            /* KEY_4 */ 5 => Regular(Num4),
            /* KEY_5 */ 6 => Regular(Num5),
            /* KEY_6 */ 7 => Regular(Num6),
            /* KEY_7 */ 8 => Regular(Num7),
            /* KEY_8 */ 9 => Regular(Num8),
            /* KEY_9 */ 10 => Regular(Num9),
            /* KEY_0 */ 11 => Regular(Num0),
            /* KEY_MINUS */ 12 => Regular(Minus),
            /* KEY_EQUAL */ 13 => Regular(Equals),
            /* KEY_BACKSPACE */ 14 => Regular(Backspace),
            /* KEY_TAB */ 15 => Regular(Tab),
            /* KEY_Q */ 16 => Regular(Q),
            /* KEY_W */ 17 => Regular(W),
            /* KEY_E */ 18 => Regular(E),
            /* KEY_R */ 19 => Regular(R),
            /* KEY_T */ 20 => Regular(T),
            /* KEY_Y */ 21 => Regular(Y),
            /* KEY_U */ 22 => Regular(U),
            /* KEY_I */ 23 => Regular(I),
            /* KEY_O */ 24 => Regular(O),
            /* KEY_P */ 25 => Regular(P),
            /* KEY_LEFTBRACE */ 26 => Regular(LeftSquareBracket),
            /* KEY_RIGHTBRACE */ 27 => Regular(RightSquareBracket),
            /* KEY_ENTER */ 28 => Regular(Enter),
            /* KEY_LEFTCTRL */ 29 => Modifier(LeftCtrl),
            /* KEY_A */ 30 => Regular(A),
            /* KEY_S */ 31 => Regular(S),
            /* KEY_D */ 32 => Regular(D),
            /* KEY_F */ 33 => Regular(F),
            /* KEY_G */ 34 => Regular(G),
            /* KEY_H */ 35 => Regular(H),
            /* KEY_J */ 36 => Regular(J),
            /* KEY_K */ 37 => Regular(K),
            /* KEY_L */ 38 => Regular(L),
            /* KEY_SEMICOLON */ 39 => Regular(Semicolon),
            /* KEY_APOSTROPHE */ 40 => Regular(SingleQuote),
            /* KEY_GRAVE */ 41 => Regular(Grave),
            /* KEY_LEFTSHIFT */ 42 => Modifier(LeftShift),
            /* KEY_BACKSLASH */ 43 => Regular(BackSlash),
            /* KEY_Z */ 44 => Regular(Z),
            /* KEY_X */ 45 => Regular(X),
            /* KEY_C */ 46 => Regular(C),
            /* KEY_V */ 47 => Regular(V),
            /* KEY_B */ 48 => Regular(B),
            /* KEY_N */ 49 => Regular(N),
            /* KEY_M */ 50 => Regular(M),
            /* KEY_COMMA */ 51 => Regular(Comma),
            /* KEY_DOT */ 52 => Regular(Period),
            /* KEY_SLASH */ 53 => Regular(ForwardSlash),
            /* KEY_RIGHTSHIFT */ 54 => Modifier(RightShift),
            /* KEY_KPASTERISK */ 55 => Regular(KeyPadAsterisk),
            /* KEY_LEFTALT */ 56 => Modifier(LeftAlt),
            /* KEY_SPACE */ 57 => Regular(Space),
            /* KEY_CAPSLOCK */ 58 => Regular(CapsLock),
            /* KEY_F1 */ 59 => Regular(F1),
            /* KEY_F2 */ 60 => Regular(F2),
            /* KEY_F3 */ 61 => Regular(F3),
            /* KEY_F4 */ 62 => Regular(F4),
            /* KEY_F5 */ 63 => Regular(F5),
            /* KEY_F6 */ 64 => Regular(F6),
            /* KEY_F7 */ 65 => Regular(F7),
            /* KEY_F8 */ 66 => Regular(F8),
            /* KEY_F9 */ 67 => Regular(F9),
            /* KEY_F10 */ 68 => Regular(F10),
            /* KEY_NUMLOCK */ 69 => Regular(NumLock),
            /* KEY_SCROLLLOCK */ 70 => Regular(ScrollLock),
            /* KEY_KP7 */ 71 => Regular(KeyPadNum7),
            /* KEY_KP8 */ 72 => Regular(KeyPadNum8),
            /* KEY_KP9 */ 73 => Regular(KeyPadNum9),
            /* KEY_KPMINUS */ 74 => Regular(KeyPadMinus),
            /* KEY_KP4 */ 75 => Regular(KeyPadNum4),
            /* KEY_KP5 */ 76 => Regular(KeyPadNum5),
            /* KEY_KP6 */ 77 => Regular(KeyPadNum6),
            /* KEY_KPPLUS */ 78 => Regular(KeyPadPlus),
            /* KEY_KP1 */ 79 => Regular(KeyPadNum1),
            /* KEY_KP2 */ 80 => Regular(KeyPadNum2),
            /* KEY_KP3 */ 81 => Regular(KeyPadNum3),
            /* KEY_KP0 */ 82 => Regular(KeyPadNum0),
            /* KEY_KPDOT */ 83 => Regular(KeyPadPeriod),
            /* KEY_102ND */ 86 => Regular(BackSlash), /* `\` for non-US */
            /* KEY_F11 */ 87 => Regular(F11),
            /* KEY_F12 */ 88 => Regular(F12),
            /* KEY_KPENTER */ 96 => Regular(KeyPadEnter),
            /* KEY_RIGHTCTRL */ 97 => Modifier(RightCtrl),
            /* KEY_KPSLASH */ 98 => Regular(KeyPadSlash),
            /* KEY_SYSRQ */ 99 => Regular(PrintScreen),
            /* KEY_RIGHTALT */ 100 => Modifier(RightAlt),
            /* KEY_HOME */ 102 => Regular(Home),
            /* KEY_UP */ 103 => Regular(Up),
            /* KEY_PAGEUP */ 104 => Regular(PageUp),
            /* KEY_LEFT */ 105 => Regular(Left),
            /* KEY_RIGHT */ 106 => Regular(Right),
            /* KEY_END */ 107 => Regular(End),
            /* KEY_DOWN */ 108 => Regular(Down),
            /* KEY_PAGEDOWN */ 109 => Regular(PageDown),
            /* KEY_INSERT */ 110 => Regular(Insert),
            /* KEY_DELETE */ 111 => Regular(Delete),
            /* KEY_MUTE */ 113 => Regular(VolumeMute),
            /* KEY_VOLUMEDOWN */ 114 => Regular(VolumeDown),
            /* KEY_VOLUMEUP */ 115 => Regular(VolumeUp),
            /* KEY_POWER */ 116 => Regular(Power),
            /* KEY_KPEQUAL */ 117 => Regular(KeyPadEqual),
            /* KEY_KPPLUSMINUS */ 118 => Regular(KeyPadMinus),
            /* KEY_KPCOMMA */ 121 => Regular(KeyPadComma),
            /* KEY_LEFTMETA */ 125 => Modifier(LeftSuper),
            /* KEY_RIGHTMETA */ 126 => Modifier(RightSuper),
            /* KEY_KPLEFTPAREN */ 179 => Regular(KeyPadLeftParen),
            /* KEY_KPRIGHTPAREN */ 180 => Regular(KeyPadRightParen),
            _ => Unknown,
        }
    }
}

#[repr(u8)]
pub enum KeyEvent {
    Release = 0x00,
    Press = 0x01,
    Repeat = 0x02,
}
